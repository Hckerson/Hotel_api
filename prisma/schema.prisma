// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}


model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  username          String
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  twofaVerified     Boolean   @default(false)
  updatedAt         DateTime  @updatedAt
  provider          String
  verificationToken String?
  speakeasySecret   String?
  lastLoginIp       String?
  lastKnownDevice   String?
  sessions          Session[]
  geoData           GeoData?
  guest             Guest?
  admin             Admin?
}

model Guest {
  id          String        @id @default(uuid())
  userId      String        @unique
  role        Role          @default(GUEST)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Booking     Booking[]
  Testimonial Testimonial[]
  blog        BlogPost[]
  payment     Payment[]
}

model Admin {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RoomType {
  id          String   @id @default(uuid())
  name        String
  description String
  basePrice   Int
  capacity    Int
  amenities   String[]
  images      String[]
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Room {
  id           String    @id @default(uuid())
  floor        Int
  roomNumber   Int
  isBooked     Boolean   @default(false)
  isOccupied   Boolean   @default(false)
  roomTypeId   String
  checkInDate  DateTime  @default(now())
  checkOutDate DateTime
  roomType     RoomType  @relation(fields: [roomTypeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Booking      Booking[]
}

model Payment {
  id            String        @id @default(uuid())
  bookingId     String        @unique
  amount        Int
  currency      String
  transactionId String
  channel       String        @default("Card")
  guestId       String
  guest         Guest         @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status        PaymentStatus
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Booking {
  id           String        @id @default(uuid())
  guestId      String
  guest        Guest         @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId       String        
  room         Room          @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status       BookingStatus  @default(PENDING)
  payment      Payment? 
  checkInDate  DateTime
  checkOutDate DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model GeoData {
  id       String @id @default(uuid())
  country  String
  region   String
  timezone String
  city     String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BlogPost {
  id        String   @id @default(uuid())
  guestId   String
  guest     Guest    @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title     String
  slug      String   @unique
  content   String
  authorId  String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
}

model Testimonial {
  id       String  @id @default(uuid())
  guestId  String
  content  String
  rating   Int
  approved Boolean
  guest    Guest   @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Amenities {
  id          String @id @default(uuid())
  name        String @unique
  icon        String
  description String
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  rememberToken String?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
